module ex1 where

data bool = true | false

not : bool -> bool = split
    true -> false
    false -> true

Path (A : U) (a b : A) : U = PathP (<_> A) a b

refl (A : U) (a : A) : Path A a a = <i> a

truePath : Path bool true true = <i> true

notK : (b : bool) -> Path bool (not (not b)) b = split
     true -> <i> true
     false -> <i> false

cong (A B : U) (f : A -> B) (a b : A) (p : Path A a b) : Path B (f a) (f b) = <i> f (p @ i)

congbin (A B C : U) (f : A -> B -> C) (a a' : A) (b b' : B)
        (p : Path A a a') (q : Path B b b') :
        Path C (f a b) (f a' b') = <i> f (p @ i) (q @ i)


funExt (A B : U) (f g : A -> B)
       (p : (x : A) -> Path B (f x) (g x)) :
       Path (A -> B) f g = <i> \(a : A) -> (p a) @ i


funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Path (B x) (f x) (g x)) :
       Path ((x : A) -> B x) f g = <i> \(x : A) -> (p x) @ i

funExt2 (A B C : U) (f g : A -> B -> C)
        (p : (x : A) (y : B) -> Path C (f x y) (g x y)) :
        Path (A -> B -> C) f g = <i> \(x : A) (y : B) -> (p x y) @ i

compfb (f g : bool -> bool) : bool -> bool =
       \(b : bool) -> g (f b)

id (A : U) (a : A) : A = a

notK' : Path (bool -> bool) (compfb not not) (id bool) =
      <i> \(b : bool) -> notK b @ i

data nat = zero
         | suc (n : nat)

mutual
  even : nat -> bool = split
    zero -> true
    suc n -> odd n

  odd : nat -> bool = split
    zero -> false
    suc n -> even n
    
evenodd (n : nat) : Path bool (even n) (odd (suc n)) = <i> (even n) 
