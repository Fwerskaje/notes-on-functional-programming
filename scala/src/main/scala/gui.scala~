import javax.swing._

import java.awt.image.BufferedImage
import java.awt.image.ImageObserver

import java.awt.RenderingHints
import java.awt.Color
import java.awt.Graphics
import java.awt.Graphics2D

case class Vector (x : Double, y : Double) {
  val asTuple = (x, y)

  def +(other : Vector) = other match {
    case Vector(x̂, ŷ) => Vector(x + x̂, y + ŷ)
  }

  def unary_-() = Vector(-x, -y)
  def -(other : Vector) = this + (-other)
  def *(k : Double) = Vector(x * k, y * k)

  def rotate(φ : Double) =
    Vector(x * math.cos(φ) - y * math.sin(φ),
           x * math.sin(φ) + y * math.cos(φ))
}

class Polygon (points : List[Vector], center : Vector, color : Color) {
  def rotate(φ : Double) = {
    def noncentralRotation(v1 : Vector, v2 : Vector) =
      ((v1 - v2) rotate φ) + v2
    new Polygon (points map (noncentralRotation(_, center)),
      center,
      color)
  }
  def draw(g : Graphics2D) {
    val (xpoints, ypoints) = (points map (_.asTuple)).unzip
    g.setColor(color)
    g.fillPolygon(xpoints.toArray map (_.toInt),
                  ypoints.toArray map (_.toInt),
                  points.length)
  }
}

class MyWindow extends JFrame("Some Swing application") {
  import java.awt.Dimension
  import javax.swing.Timer
  import java.awt.event.ActionEvent

  import JFrame._

  setDefaultLookAndFeelDecorated(true)
  setDefaultCloseOperation(EXIT_ON_CLOSE)

  val panel = new JPanel
  getContentPane() add panel

  pack

  override val size = new Dimension(800, 600)

  setSize(size.width, size.height)
  setVisible(true)
  setResizable(false)

  var p1 = new Polygon(
      List(
        Vector(100, 100),
        Vector(300, 100),
        Vector(100, 300),
        Vector(300, 300)),
      Vector(200, 200),
      Color.blue)
  var p2 = new Polygon(
      List(
        Vector(300, 300),
        Vector(300, 400),
        Vector(500, 500),
        Vector(400, 300)),
      Vector(400, 400),
      Color.blue)

  def paintPanel(g : Graphics2D)(e : ActionEvent) {
    val img = new BufferedImage(size.width, size.height,
      BufferedImage.TYPE_INT_RGB)
    val g2 = img.getGraphics.asInstanceOf[Graphics2D]

    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON)
    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                        RenderingHints.VALUE_TEXT_ANTIALIAS_ON)

    g2.setColor(Color.white)
    g2.fillRect(0, 0, size.width, size.height)

    p1 = p1 rotate (math.Pi / 180.0)
    p2 = p2 rotate (math.Pi / 360.0)

    p1 draw g2
    p2 draw g2

    g2.dispose

    g.clearRect(0, 0, size.width, size.height)
    g.drawImage(img, 0, 0, null)
  }

  val graphics = panel.getGraphics.asInstanceOf[Graphics2D]

  //graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
  //                          RenderingHints.VALUE_ANTIALIAS_ON)
  //graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
  //                          RenderingHints.VALUE_TEXT_ANTIALIAS_ON)

  val timer = new Timer (35, paintPanel(graphics))
  timer.start
}

object GraphicsApp extends App {
  val win = new MyWindow
}
