package fpinscala

object Foldable {

  import Monoids._

  trait Foldable[F[_]] {
 //   def foldRight[A, B](as: F[A])(f: (A, B) ⇒ B): B
 //   def foldLeft[A, B](as: F[A])(f: (B, A) ⇒ B): B
    def foldMap[A, B](as: F[A])(f: A ⇒ B)(mb: Monoid[B]): B
  }

  def listFoldable[A,B] = new Foldable[List[A]] {
    override def foldMap[A, B](as: List[A])(f: A => B)(mb: Monoid[B]): B = as match {
      case Nil ⇒ mb.zero
      case x :: xs ⇒ mb.op(f(x), foldMap(xs)(f)(mb))
    }
  }
}